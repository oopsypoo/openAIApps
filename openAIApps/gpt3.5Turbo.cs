using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;


namespace gpt35Turbo
{ 
    public class requestGPT35 : IDisposable
    {
        public string model { get; set; }
        public Message[] messages { get; set; }
        public double temperature { get; set; }
        public double top_p { get; set; }
        public int n { get; set; }
        public bool stream { get; set; }
        public string stop { get; set; }
        /// <summary>
        /// don't need. it will set itself to max. only needed if we need to restrict
        /// </summary>
        //public int max_tokens { get; set; }
        public double presence_penalty { get; set; }
        public double frequency_penalty { get; set; }
        /// <summary>
        /// Modify the likelihood of specified tokens appearing in the completion.
        /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. 
        /// Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, 
        /// but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or 
        /// exclusive selection of the relevant token.
        /// </summary>
        ///public class logit_bias { }
        public string user { get; set; }
        private readonly uint MaxTokens = 4097;
        
        public readonly string[] gpt35Roles = { "user", "system" };
        private string _Role = "";

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string tbName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(tbName));
        }

        public void SetRole(string str)
        {
            _Role = str;
        }
        /// instead of an array create a list
        // public List<Message> messages { get; set; }
        /// <summary>
        /// 3 exusting roles:
        /// user - 
        /// system - tell the bot what you fell about the answer/chat
        /// No matter what I think we can start with a user-role
        /// </summary>
        public void InitRequest(string rx)
        {
            
            ///if List init like this??
            ///Look at this more closely
            //    messages = new List<Message>();
            messages = new Message[1];
            messages[0] = new Message();
            messages[0].role = _Role;
            messages[0].content = rx;
        }
        /// <summary>
        /// add latest message from either bot or user
        /// </summary>
        public void AddMessage(string Role, string msg)
        {
            if (messages == null)
            {
                InitRequest(msg);
            }
            else//(this.messages != null)
            {
                int items = this.messages.Length;
                if (items > 0)
                {
                    var obj = messages;
                    Array.Resize(ref obj, items + 1);
                    messages = obj;
                    messages[items] = new Message();
                    messages[items].role = Role;
                    messages[items].content = msg;
                }
            }

        }
        public void SaveToLogFile()
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text Files| *.txt";
            saveFileDialog1.Title = "Save History to file";
            
            if (saveFileDialog1.ShowDialog() == false)
                return;
            StreamWriter writer = new StreamWriter(saveFileDialog1.OpenFile());
            writer.WriteLine(this.model + "\n");
            if(messages != null && messages.Length > 0)
            {
                int length = messages.Length;
                for (int i = 0; i < length; i++)
                {
                    writer.WriteLine("[" + i + "]" + this.messages[i].role + ", " + this.messages[i].content);
                }
            }
            writer.Close();
            writer.Dispose();
        }

        public void Dispose()
        {
            //throw new NotImplementedException();
            if(messages != null && messages.Length > 0)
            {
                for (int i = 0; i < messages.Length; i++)
                {
                    if (messages[i] != null)

                        messages[i] = null;

                }
                messages = null;
            }
        }
        ~requestGPT35()
        {
            Dispose();
        }
        /// <summary>
        /// define the model here or whatever variables that needs to be initialized
        /// </summary>
        public requestGPT35() 
        { 
            _Role = gpt35Roles[0]; 
            temperature = 1;
            top_p = 1;
            n = 1;
            stream = false;
            stop = null;
            /// regular text-completion
            /// 
            //model = "gpt-3.5-turbo-0301";
            //model = "gpt-3.5-turbo";
            ///model = "gpt-3.5-turbo-0613";
            //model = "gpt-3.5-turbo-16k";
            //model = "gpt-4";
            model = "gpt-4-1106-preview";
            //model = "gpt-4-0314";
            //model = "gpt-4-32k";
            //model = "gpt-4-8k";
            //model = "gpt-4-32k-0314";
            //model = "gpt-3.5-turbo-0613";
            //model = "gpt-3.5-turbo-16k"; //let's try at one point 16,384 tokens
            // max_tokens = (int)this.MaxTokens - 10;
            presence_penalty = 0;
            frequency_penalty = 0;
            user = null;
        }
    }
    public class Message
    {
        public string role { get; set; }
        public string content { get; set; }
    }



    public class responseGPT35Turbo
    {
        public string id { get; set; }
        public string _object { get; set; }
        public int created { get; set; }
        public string model { get; set; }
        public gpt35Usage usage { get; set; }
        public gpt35Choice[] choices { get; set; }


    }

    public class gpt35Usage
    {
        public int prompt_tokens { get; set; }
        public int completion_tokens { get; set; }
        public int total_tokens { get; set; }
    }

    public class gpt35Choice
    {
        public gpt35Message message { get; set; }
        public string finish_reason { get; set; }
        public int index { get; set; }
    }

    public class gpt35Message
    {
        public string role { get; set; }
        public string content { get; set; }
    }

}